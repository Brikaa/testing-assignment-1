graph = [
    [2, 3],
    [],
    [4, 5],
    [],
    [6],
    [7, 16],
    [8, 15],
    [9],
    [10, 13],
    [11, 12],
    [13],
    [9],
    [14, 15],
    [],
    [6],
    []
]

test_paths = [
    [1, 2],
    [1, 3, 4],
    [1, 3, 5, 6, 7, 15, 6, 7, 8, 9, 10, 12, 9, 10,
        12, 9, 10, 12, 9, 10, 11, 13, 15, 6, 16],
    [1, 3, 5, 6, 7, 8, 9, 10, 12, 9, 13, 14],
    [1, 3, 5, 6, 7, 8, 9, 10, 12, 9, 13, 15, 6, 7, 15, 6, 16],
    [1, 3, 5, 6, 16],
    [1, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14],
    [1, 3, 5, 6, 7, 8, 9, 13, 14],
    [1, 3, 5, 6, 7, 8, 9, 10, 11, 13, 15, 6, 7, 8, 9, 10, 11, 13, 15, 6, 7, 8, 9, 10, 12, 9, 10,
        11, 13, 15, 6, 7, 8, 9, 10, 12, 9, 13, 15, 6, 7, 8, 9, 13, 15, 6, 7, 8, 9, 10, 11, 13, 14],
    [1, 3, 5, 6, 7, 8, 9, 13, 15, 6, 7, 8, 9, 10, 11, 13, 15, 6, 16],
    [1, 3, 5, 6, 7, 8, 9, 13, 15, 6, 16],
    [1, 3, 5, 6, 7, 8, 9, 10, 12, 9, 13, 15, 6, 16],
    [1, 3, 5, 6, 7, 8, 9, 10, 12, 9, 10, 11, 13, 14],
    [1, 3, 5, 6, 7, 8, 9, 13, 15, 6, 7, 8, 9, 13, 14]
]

prime_paths = [
    [1, 2],
    [1, 3, 4],
    [1, 3, 5, 6, 16],
    [1, 3, 5, 6, 7, 15],
    [1, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14],
    [1, 3, 5, 6, 7, 8, 9, 10, 11, 13, 15],
    [1, 3, 5, 6, 7, 8, 9, 10, 12],
    [1, 3, 5, 6, 7, 8, 9, 13, 14],
    [1, 3, 5, 6, 7, 8, 9, 13, 15],
    [6, 7, 15, 6],
    [6, 7, 8, 9, 10, 11, 13, 15, 6],
    [6, 7, 8, 9, 13, 15, 6],
    [7, 15, 6, 16],
    [7, 15, 6, 7],
    [7, 8, 9, 10, 11, 13, 15, 6, 16],
    [7, 8, 9, 10, 11, 13, 15, 6, 7],
    [7, 8, 9, 13, 15, 6, 16],
    [7, 8, 9, 13, 15, 6, 7],
    [8, 9, 10, 11, 13, 15, 6, 7, 8],
    [8, 9, 13, 15, 6, 7, 8],
    [9, 10, 11, 13, 15, 6, 7, 8, 9],
    [9, 10, 12, 9],
    [9, 13, 15, 6, 7, 8, 9],
    [10, 11, 13, 15, 6, 7, 8, 9, 10],
    [10, 12, 9, 10],
    [10, 12, 9, 13, 14],
    [10, 12, 9, 13, 15, 6, 16],
    [10, 12, 9, 13, 15, 6, 7, 8],
    [11, 13, 15, 6, 7, 8, 9, 10, 11],
    [11, 13, 15, 6, 7, 8, 9, 10, 12],
    [12, 9, 10, 11, 13, 14],
    [12, 9, 10, 11, 13, 15, 6, 16],
    [12, 9, 10, 11, 13, 15, 6, 7, 8],
    [12, 9, 10, 12],
    [13, 15, 6, 7, 8, 9, 10, 11, 13],
    [13, 15, 6, 7, 8, 9, 13],
    [15, 6, 7, 15],
    [15, 6, 7, 8, 9, 10, 11, 13, 14],
    [15, 6, 7, 8, 9, 10, 11, 13, 15],
    [15, 6, 7, 8, 9, 13, 14],
    [15, 6, 7, 8, 9, 13, 15]
]


def is_subset(small, _big):
    first = small[0]
    big = [i for i in _big]
    while True:
        if first not in big:
            return False
        index = big.index(first)
        if all(i + index < len(big) and small[i] == big[i + index] for i in range(len(small))):
            return True
        if index + 1 >= len(big):
            return False
        big = big[index + 1::]


def is_path(path, adjacency_list):
    return all(path[i + 1] in adjacency_list[path[i] - 1] for i in range(len(path) - 1))


print('Invalid test paths')
print('\n'.join(str(test_path)
      for test_path in test_paths if not is_path(test_path, graph)))

print('Invalid prime paths')
print('\n'.join(str(prime_path)
      for prime_path in prime_paths if not is_path(prime_path, graph)))

print('Uncovered prime paths')
print('\n'.join(str(prime_path) for prime_path in prime_paths if all(
    not is_subset(prime_path, test_path) for test_path in test_paths)))
